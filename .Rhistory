t1
class(t1)
unclass(t1)
t2<-as.POSIClt(Sys.time())
t2<-as.POSIXlt(Sys.time())
class(t2)
unclass(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(d1)
months(t1)
quarters(t2)
t3<-strptime( "October 17, 1986 08:24")
t3<-strptime("October 17, 1986 08:24")
t3<- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(),t1,units='days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed,y=cars$dist)
plot(x=cars$dist,y=cars$speed)
?plot
plot(x=cars$speed,y=cars$dist,xlab='Speed')
plot(x=cars$speed,y=cars$dist,xlab='Speed',ylab='Stopping Distance')
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x=cars$speed,y=cars$dist,xlab='Speed',ylab='Stopping Distance')
plot(x=cars$speed,y=cars$dist,xlab='Speed',ylab='Stopping Distance',main='My Plot')
plot(cars,main='My Plot')
?plot
plot(cars,sub='My Plot Subtitle')
plot(cars,col=2)
plot(cars,xlim=c(10,15))
plot(cars,pch=2
)
data(mtcars)
?boxplot
boxplot(mpg~cyl,mtcars)
hist(mtcars)
hist(mtcars$mpg)
install.packages("Matrix")
install.packages('caret',lib='~/Desktop/caret_6.0-47.tar.gz')
library(caret)
install.packages("caret", dependencies = c("Depends", "Suggests"))
library(caret)
library('caret')
install.packages('ggplot2')
library('caret')
library(ggplot2)
library('caret')
install.packages('BradleyTerry2')
library('caret')
install.packages('nloptr')
library('caret')
library(AppliedPredictiveModeling)
library(caret)
library(AppliedPredictiveModeling)
source('AppliedPredictiveModeling')
source(AppliedPredictiveModeling)
library('AppliedPredictiveModeling')
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
?createDataPartition
data(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training)
hist(concrete)
head(concrete)
hist(concrete$Cement)
par=c(1,2)
hist(concrete$Cement)
hist(concrete$BlastFurnaceSlag)
hist(concrete$Superplasticizer)
set.seed(3433)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
training$IL
training$IL
training$IL...
training['IL']
training['IL',]
training[,'IL']
training[,'IL_3']
grep('^[IL]',names(training),value=TRUE)
grep('^[IL_]',names(training),value=TRUE)
grep('^[IL_,]',names(training),value=TRUE)
t<-grep('^[IL_]',names(training),value=TRUE)
t
t<-training[,grep('^[IL]',names(training),value=T)]
t
head(t)
t<-t[,grep('^[L_]',names(t),value=T)]
t
head(t)
t<-training[,grep('^[IL]',names(training),value=T)]
t<-t[,grep('^[IL_]',names(t),value=T)]
t
head(t)
t<-t[,grep('^[IL_]',names(t),value=T)]
t
head(t)
t[,4:15]
head(t[,4:15])
t<-t[,4:15]
t
head(t)
preP<-preProcess(log10(t+1),method='pca',pcaComp=5)
preP<-preProcess(t,method='pca',pcaComp=5)
preP
p<-predict(preP,testing[names(t)])
p
head(p)
modelFit<-train(training$diagnosis ~.,method=‘glm’,data=t)
modelFit<-train(training$diagnosis ~.,method=‘glm’,data=t)
head(t)
t
head(t)
tr<-t
names(t)
te<-testing[names(t)]
head(t)
preProc<-preProcess(tr,method='pca',pcaComp=5)
PC<-predict(preProc,tr)
head(tr)
modelFit<-train(training$diagnosis ~.,method='glm',data=PC)
testPC<-predict(preProc,te)
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
outcome5<-confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
preProc<-preProcess(tr,method = 'pca',pcaComp = 9)
PC<-predict(preProc,tr)
modelFit<-train(training$diagnosis ~.,method='glm',data=PC)
testPC<-predict(preProc,te)
outcome9<-confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
outcome9
preProc<-preProcess(tr,method = 'pca',pcaComp = 10)
PC<-predict(preProc,tr)
modelFit<-train(training$diagnosis ~.,method='glm',data=PC)
testPC<-predict(preProc,te)
outcome10<-confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
outcome10
tr
modelFit<-preProcess(training$diagnosis ~.,methold='glm',preProcss='pca',data=tr)
modelFit<-preProcess(training$diagnosis ~.,methold='glm',preProcess='pca',data=tr)
preProc<-preProcess(tr,method='pca',pcaComp = 11)
PC<-predict(preProc,tr)
modelFit<-train(training$diagnosis,method='glm',data=PC)
modelFit<-train(training$diagnosis ~.,method='glm',data=PC)
testPC<-predict(preProc,te)
outcome11<-train(training$diagnosis ~., method='glm',predict(modelFit,testPC))
outcome11<-confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
outcome11
outcome11<-confusionMatrix(testing$diagnosis ~.,predict(modelFit,testPC))
outcome11<-confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
outcome11
outcome11==outcome10
outcome11
outcome5
outcome9
outcome10
outcome11
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ntr<-training[names(tr)]
ntr
head(ntr)
tr<-ntr
tr['diagnosis']<-training$diagnosis
head(tr)
modelFit<-train(tr$diagnosis ~.,method='glm',preProcess='pca',data=tr)
te<-testing[names(tr)]
confusionMatrix(te$diagnosis,predict(modelFit,te))
featurePlot(x=tr,y=tr$diagnosis,plot='pairs')
modFit<-train(tr$diagnosis ~ tr[-'diagnosis'],method='lm',data=tr)
tr[12]
head(tr[12])
head(tr[13])
modFit<-train(tr$diagnosis ~ tr[,-13],method='lm',data=tr)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
length(training)
length(testing)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
class(testing)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
class(testing)
head(testing[[1]])
class(testing[1])
class(testing[[1]])
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
?preProcess
adData
head(adData)
names(te)
training<-training[names(tw)]
training<-training[names(te)]
testing<-testing[names(te)]
head(testing)
head(training)
modelFit<-preProcess(training$diagnosis ~.,method='glm',thresh=0.9,preProcess='pca',data=training)
modelFit<-preProcess(training$diagnosis ~.,method='glm',thresh=0.9,preProcess='pca',data=training)
?train
preProcess?
?
q
?train
preProc<-preProcess(training,method='pca',thresh=0.9,pcaComp=9)
preProc<-preProcess(training,method='pca',thresh=0.9,pcaComp=10)
te<-training[,-'diagnosis']
te<-training[,-13]
head(te)
preProc<-preProcess(te,method='pca',thresh=0.9,pcaComp=10)
trainPC<-predict(preProc,te)
modelFit<-train(training$diagnosis ~.,method='glm',data=trainPC)
testPC<-predict(preProc,training)
tr<-te
te<-testing[names(tr)]
testPC<-predict(preProc,te)
outcome10<-confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
outcome10
preProc<-preProcess(te,method='pca',thresh=0.9,pcaComp=9)
trainPC<-predict(preProc,te)
modelFit<-train(training$diagnosis ~.,method='glm',data=trainPC)
preProc<-preProcess(te,method='pca',thresh=0.8)
?preProcess
preProc<-preProcess(tr,method='pca',thresh=0.8)
trainPC<-predict(preProc,tr)
modelFit<-train(training$diagnosis ~.,method='glm',data=trainPC)
testPC<-predict(preProc,te)
outcome<-confusionmatrix(testing$diagnosis,predict(modelFit,testPC))
outcome<-confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
outcome
preProc['pcaComp']
preProc$numComp
preProc<_preProcess(tr,method='pca',thresh=0.9)
preProc<-preProcess(tr,method='pca',thresh=0.9)
preProc$numComp
preProc$rotation
preProc<-preProcess(tr,method='pca',thresh=0.8)
trainPC<-predict(preProc,tr)
modelFit<-train(training$diagnosis ~.,method='glm',data=trainPC)
testPC<-predict(preProc,te)
outcome<-confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
outcome
?preProcess
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
tr<-training[names(tr)]
te<-testing[names(te)]
modelFit<-train(diagnosis,data=training,method='glm')
modelFit<-train(diagnosis~.,data=training,method='glm')
modelFit
warnings()
modelFit<-train(training$diagnosis~.,data=training,method='glm')
modelFit
confusionMatrix(testing$diagnosis,train(modelFit,te))
confusionMatrix(testing$diagnosis,train(modelFit,testing))
confusionMatrix(testing$diagnosis,train(modelFit,te))
confusionMatrix(testing$diagnosis,predict(modelFit,testing))
confusionMatrix(testing$diagnosis,predict(modelFit,te))
confusionMatrix(testing$diagnosis,predict(modelFit,testing))
modelFit<-train(training$diagnosis ~.,method='glm',data=training)
modelFit<-train(training$diagnosis ~.,method='glm',data=tr)
head(tr)
confusionMatrix(testing$diagnosis,predict(modelFit,te))
q()
x<-seq(1,10)
y<-x
?outer
f<-outer(x,y,function(x,y)cos(y)/(1+x^2))
tet<-outer(x,y,function(x,y){cos(y)/(1+x^2)})
tet==f
?contour
contour(x,y,f)
contour(x,y,f,nlevels = 45,add=T)
fa = (f-t(f))/2
?t
contour(x,y,fa,nlevels = 15)
image(x,y,fa)
persp(x,y,fa)
persp(x,y,fa,theta=30)
persp(x,y,fa,theta=30,phi=40)
?presp
?prsp
??presp
?presp
?image
?gl
library(datasets)
data("iris")
?iris
head(iris)
sapply(iris,2,mean)
sapply(iris,mean)
sapply(iris,mean,F)
sapply(iris,mean,T)
sapply(iris,mean)
colMeans(iris,T)
colMeans(iris)
colMeans(iris,headers=T)
mean(iris$Sepal.Length)
apply(iris, 2, mean)
head(iris)
apply(iris[,1:4],mean)
apply(iris[,1:4],2,mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)[[1]]
tapply(mtcars$mpg, mtcars$cyl, mean)[[1-3]]
a<-tapply(mtcars$mpg, mtcars$cyl, mean)
a[[1]]-a[[2]]
a[[1]]-a[[3]]
debug(ls)
n
debug(ls)
ls
ls
?ls
h
ls
debug(ls)
q()
q
end
nnn
nn
?debug
library(datasets)
data(iris)
?iris
iris$Species
head(iris)
length(iris)
?f
f<-gl(0,100)
class(f)
g<-gl(1,50)
r<-c(f,g)
class(r)
class(g)
r<-gl(f,g)
?gl
interaction(iris$Species,r)
iris$Species*r
f<-rep(0,100)
head(f)
f<-c(f,rep(1,50))
length(f)
iris$Species*f
apply(iris$Sepal.Length,f,mean)
apply(iris$Sepal.Length,f,mean)
split(iris,f)
new<-split(iris,f)
mean(new$`1`$Sepal.Length)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
v
sapply(split(mtcars$mpg, mtcars$cyl), mean)
head(mtcars)
new<-split(mtcars$hp,mtcars$cyl)
head(new)
mean(new$`4`) - mean(new$`8`)
x<<-10
x<-10
y<-20
x<<-y
m<<-mean
m
m(10)
m(10,0)
m(c(10,20,30))
setmean <- function(mean) m <<- mean
setmean()
setmean(10)
setmean(c(10,20,30))
m
m(m)
m
getmean<-function() m
getmean
getmean(m)
getmean()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(10,20,30)
makeVector(10)
g<-makeVector(10)
g
g$getmean
g$getmean()
g$setmean()
?g
??g
cachemean(g)
setdir('~/ProgrammingAssignment2/')
setwd('~/ProgrammingAssignment2/')
ls()
dir()
source('cachematrix.R')
v<-makeCacheMatrix(diag(10,10))
v$get()
cacheSolve(v)
v$getInv()
v$getInv()/*/v$get()
v$getInv() ** v$get()
v$getInv() */8 v$get()
v$getInv() */ v$get()
v$getInv() /*/ v$get()
v$getInv() %*% v$get()
nrow(v$get())
source('cachematrix.R')
v<-makeCacheMatrix(diag(4))
v<-makeCacheMatrix(diag(4,4))
v$get()
v$getInv()
cacheSolve(v)
source('~/ProgrammingAssignment2/cachematrix.R')
source('~/ProgrammingAssignment2/cachematrix.R')
source('~/ProgrammingAssignment2/cachematrix.R')
v<-makeCacheMatrix(diag(4,4))
v$getInc()
v$getInv()
cacheSolve(v)
source('~/ProgrammingAssignment2/cachematrix.R')
v<-makeCacheMatrix(diag(4,4))
v$getInv()
cacheSolve(v)
v$getInv()
v$get()
source('~/ProgrammingAssignment2/cachematrix.R')
